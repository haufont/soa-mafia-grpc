// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	event "mafia-grpc/internal/event"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MafiaServiceClient is the client API for MafiaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MafiaServiceClient interface {
	Join(ctx context.Context, in *ReqJoin, opts ...grpc.CallOption) (MafiaService_JoinClient, error)
	GetState(ctx context.Context, in *ReqGetState, opts ...grpc.CallOption) (*RspGetState, error)
	Kill(ctx context.Context, in *ReqKill, opts ...grpc.CallOption) (*RspKill, error)
	Check(ctx context.Context, in *ReqCheck, opts ...grpc.CallOption) (*RspCheck, error)
	Publish(ctx context.Context, in *ReqPublish, opts ...grpc.CallOption) (*RspPublish, error)
}

type mafiaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMafiaServiceClient(cc grpc.ClientConnInterface) MafiaServiceClient {
	return &mafiaServiceClient{cc}
}

func (c *mafiaServiceClient) Join(ctx context.Context, in *ReqJoin, opts ...grpc.CallOption) (MafiaService_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &MafiaService_ServiceDesc.Streams[0], "/api.MafiaService/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaServiceJoinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MafiaService_JoinClient interface {
	Recv() (*event.Event, error)
	grpc.ClientStream
}

type mafiaServiceJoinClient struct {
	grpc.ClientStream
}

func (x *mafiaServiceJoinClient) Recv() (*event.Event, error) {
	m := new(event.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mafiaServiceClient) GetState(ctx context.Context, in *ReqGetState, opts ...grpc.CallOption) (*RspGetState, error) {
	out := new(RspGetState)
	err := c.cc.Invoke(ctx, "/api.MafiaService/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaServiceClient) Kill(ctx context.Context, in *ReqKill, opts ...grpc.CallOption) (*RspKill, error) {
	out := new(RspKill)
	err := c.cc.Invoke(ctx, "/api.MafiaService/Kill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaServiceClient) Check(ctx context.Context, in *ReqCheck, opts ...grpc.CallOption) (*RspCheck, error) {
	out := new(RspCheck)
	err := c.cc.Invoke(ctx, "/api.MafiaService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaServiceClient) Publish(ctx context.Context, in *ReqPublish, opts ...grpc.CallOption) (*RspPublish, error) {
	out := new(RspPublish)
	err := c.cc.Invoke(ctx, "/api.MafiaService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MafiaServiceServer is the server API for MafiaService service.
// All implementations must embed UnimplementedMafiaServiceServer
// for forward compatibility
type MafiaServiceServer interface {
	Join(*ReqJoin, MafiaService_JoinServer) error
	GetState(context.Context, *ReqGetState) (*RspGetState, error)
	Kill(context.Context, *ReqKill) (*RspKill, error)
	Check(context.Context, *ReqCheck) (*RspCheck, error)
	Publish(context.Context, *ReqPublish) (*RspPublish, error)
	mustEmbedUnimplementedMafiaServiceServer()
}

// UnimplementedMafiaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMafiaServiceServer struct {
}

func (UnimplementedMafiaServiceServer) Join(*ReqJoin, MafiaService_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedMafiaServiceServer) GetState(context.Context, *ReqGetState) (*RspGetState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedMafiaServiceServer) Kill(context.Context, *ReqKill) (*RspKill, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kill not implemented")
}
func (UnimplementedMafiaServiceServer) Check(context.Context, *ReqCheck) (*RspCheck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedMafiaServiceServer) Publish(context.Context, *ReqPublish) (*RspPublish, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedMafiaServiceServer) mustEmbedUnimplementedMafiaServiceServer() {}

// UnsafeMafiaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MafiaServiceServer will
// result in compilation errors.
type UnsafeMafiaServiceServer interface {
	mustEmbedUnimplementedMafiaServiceServer()
}

func RegisterMafiaServiceServer(s grpc.ServiceRegistrar, srv MafiaServiceServer) {
	s.RegisterService(&MafiaService_ServiceDesc, srv)
}

func _MafiaService_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqJoin)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MafiaServiceServer).Join(m, &mafiaServiceJoinServer{stream})
}

type MafiaService_JoinServer interface {
	Send(*event.Event) error
	grpc.ServerStream
}

type mafiaServiceJoinServer struct {
	grpc.ServerStream
}

func (x *mafiaServiceJoinServer) Send(m *event.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _MafiaService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MafiaService/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServiceServer).GetState(ctx, req.(*ReqGetState))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaService_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqKill)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServiceServer).Kill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MafiaService/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServiceServer).Kill(ctx, req.(*ReqKill))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCheck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MafiaService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServiceServer).Check(ctx, req.(*ReqCheck))
	}
	return interceptor(ctx, in, info, handler)
}

func _MafiaService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPublish)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MafiaService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServiceServer).Publish(ctx, req.(*ReqPublish))
	}
	return interceptor(ctx, in, info, handler)
}

// MafiaService_ServiceDesc is the grpc.ServiceDesc for MafiaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MafiaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.MafiaService",
	HandlerType: (*MafiaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetState",
			Handler:    _MafiaService_GetState_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _MafiaService_Kill_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _MafiaService_Check_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _MafiaService_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _MafiaService_Join_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
